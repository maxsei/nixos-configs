" ============================================================================
" 1. Vim                                                              856f0120
"   - vim essentials                                                  b73d6bae
"   - Show tabs                                                       045fe84d
"   - spacing                                                         fc1c548d
"   - appearance                                                      a7d6fa94
"   - search                                                          9e3079ab
"   - completion                                                      874839b8
"   - folds                                                           e8b1f9d9
"   - essential mappings                                              6915f3fd
"   - toggle hlsearch.                                                121e63b8
"   - tab over selections keeping selection                           d5f8d282
"   - cnext and cprevious commands                                    18665ce5
"   - allow gf to open non-existent files                             7933cedf
"   - save selection to the 'v' register when entering command mode   ad250cf1
"   - window resizing                                                 d76e9177
"   - toggle quickfix window                                          48add5de
"   - system clipboard                                                a882c5be
"   - open previously closed split buffer in vertical split mode      7918f786
" 2. Filetypes                                                        02af6cf9
"   - vim                                                             db680595
"   - nix                                                             cc26a1a5
"   - markdown                                                        b8da4ee5
" 3. Plugins                                                          99d77836
"   - catppuccin                                                      7ce56ab4
"   - commentary                                                      90732019
"   - lspconfig                                                       b1883220
"   - deoplete                                                        16df4499
"   - ultisnips                                                       282c8d63
" ============================================================================

" 1. Vim                                                              856f0120
" vim essentials                                                      b73d6bae
syntax on
filetype plugin indent on
set exrc
set secure
set mouse=n " who the fuck uses mouse in insert mode?
set encoding=utf-8
set noerrorbells
set hidden
set backup
let &backupdir = expand('$XDG_DATA_HOME/nvim/backup//')
if !isdirectory(&backupdir) | call mkdir(&backupdir, "p") | endif
set undofile
set noswapfile
set history=10000
set autoread
set autowrite
set updatetime=1000 " interval (ms) for autosaving swap
set redrawtime=1000 " max (ms) for a regex to match

" Show tabs                                                           045fe84d
set list
set listchars=tab:>-,trail:~,extends:>,precedes:<

" spacing                                                             fc1c548d
set autoindent
set shiftwidth=2
set softtabstop=2
set tabstop=2
set noexpandtab
" TODO: I want to fork vim to conditionally expand tabs based on indentation/alignment
set nojoinspaces
set whichwrap=<,>,[,],b,
set nowrap

" appearance                                                          a7d6fa94
set number relativenumber
set textwidth=80
set backspace=indent,eol,start
set scrolloff=3
set sidescrolloff=20
set laststatus=2
set showcmd
set ruler

" search                                                              9e3079ab
set nohlsearch
set incsearch
set ignorecase
set smartcase

" completion                                                          874839b8
set infercase
set wildmode=longest,list,full
set wildmenu
set wildignore=*.o,*~,*.pyc
set wildignorecase

" folds                                                               e8b1f9d9
set foldmethod=manual

" essential mappings                                                  6915f3fd
let mapleader=","
nnoremap ; :
nmap Q <nop>

" toggle hlsearch.                                                    121e63b8
nnoremap <leader>h :set hlsearch! hlsearch?<CR>

" tab over selections keeping selection                               d5f8d282
vnoremap < <gv
vnoremap > >gv

" cnext and cprevious commands                                        18665ce5
nmap <C-n> :cnext<CR>
nmap <C-p> :cprevious<CR>

" allow gf to open non-existent files                                 7933cedf
nnoremap gf :edit <cfile><cr>
nnoremap <C-w>gf gF:tabe <cfile><cr>

" save selection to the 'v' register when entering command mode       ad250cf1
vnoremap : "vygv:

" window resizing                                                     d76e9177
nmap <C-w><C-h> :vertical resize +5<CR>
nmap <C-w><C-l> :vertical resize -5<CR>
nmap <C-w><C-j> :resize +5<CR>
nmap <C-w><C-k> :resize -5<CR>

" toggle quickfix window                                              48add5de
function! ToggleQuickfix()
  if ( getqflist({'winid' : 1}).winid )
    cclose
  else
		" open/populate quickfix list and return to original window.
    let orgwin = win_getid()
    lua vim.diagnostic.setqflist()
		call win_gotoid(orgwin)
		" go to previous error and then back to original position
    let orgpos = getpos('.')
    cabove
    call setpos('.', orgpos)
  endif
endfunction
command -bang -nargs=? ToggleQuickfix call ToggleQuickfix()
nmap <leader>q :call ToggleQuickfix()<CR>

" system clipboard                                                    a882c5be
vnoremap <silent> <Leader>y   "+ygv
vnoremap <silent> <Leader>d   "+dgv<Esc>
nnoremap <silent> <Leader>p   "+p
nnoremap <silent> <Leader>P   "+P
nnoremap <silent> <Leader>yy  V"+y
nnoremap <silent> <Leader>dd  V"+d
inoremap <silent> <S-Insert>  <C-R>+

" open previously closed split buffer in vertical split mode          7918f786
nmap <leader>sp <cmd>vert sbp<CR>

" 2. Filetypes                                                        02af6cf9
" vim                                                                 db680595
autocmd FileType vim setlocal commentstring=\"%s " commentary:90732019
" nix                                                                 cc26a1a5
autocmd FileType nix setlocal shiftwidth=2
autocmd FileType nix setlocal tabstop=2
autocmd FileType nix setlocal expandtab
autocmd FileType nix setlocal softtabstop=2
" markdown                                                            b8da4ee5
autocmd FileType markdown setlocal wrap
autocmd FileType markdown setlocal tw=0
autocmd FileType markdown setlocal spell

" 3. Plugins                                                          99d77836
" catppuccin                                                          7ce56ab4
lua << EOF
vim.g.catppuccin_flavour = "macchiato"
require("catppuccin").setup()
vim.cmd [[colorscheme catppuccin]]
if vim.env.TERM == 'alacritty' then
	vim.api.nvim_set_hl(0, "NonText", {ctermbg=NONE})
	vim.api.nvim_set_hl(0, "Normal", {guibg=NONE, ctermbg=NONE})
end
EOF

" commentary                                                          90732019

" lspconfig                                                           b1883220

lua << EOF
local nvim_lsp = require('lspconfig')
local util = require('lspconfig/util')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
end

-- Pylsp.
-- https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#pylsp
-- https://github.com/python-lsp/python-lsp-server/blob/develop/CONFIGURATION.md
nvim_lsp['pylsp'].setup {
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  },
  settings = {
    pylsp = {
      configurationSources = {
        'flake8',
      },
      plugins = {
        flake8 = {
          enabled = true,
        },
      },
    },
  },
root_dir = function(fname)
  local root_files = {
    'pyproject.toml',
    'setup.py',
    'setup.cfg',
    'requirements.txt',
    'Pipfile',
    -- Flake8
    '.flake8',
  }
  return util.root_pattern(unpack(root_files))(fname) or util.find_git_ancestor(fname)
end,
}

-- Svelte.
nvim_lsp['svelte'].setup {}

-- Go.
nvim_lsp['gopls'].setup {
  cmd = {"gopls", "serve"},
  single_file_support = true,
  settings = {
    gopls = {
      analyses = {
        unusedparams = true,
      },
      staticcheck = true,
    },
  },
}

-- -- eslint.
-- nvim_lsp['eslint'].setup {
--    -- cmd = { "npx", "-p", "vscode-langservers-extracted", "vscode-eslint-language-server", "--stdio" },
--    cmd = { "npx", "eslint_d", "--stdin" },
-- }

-- tsserver.
nvim_lsp['tsserver'].setup {
  cmd = { "npx", "typescript-language-server", "--stdio" },
  capabilities = {
    textDocument = {
      publishDiagnostics = false,
    },
  },
}

-- nvim_lsp['eslint'].setup{
--   -- bin = 'eslint', -- or `eslint_d`
--   cmd = { "npx", "eslint_d", "--stdin" },
--   diagnostics = {
--     enable = true,
--   },
-- }

nvim_lsp['clangd'].setup{}

nvim_lsp['zls'].setup{}

-- eslint diagnostics.
nvim_lsp['diagnosticls'].setup{
  on_attach= function(client)
    print("'" .. client.name .. "' attached.")
  end,
  cmd = { "npx", "diagnostic-languageserver", "--stdio" },
  filetypes = { 'javascript', 'javascriptreact', 'typescript', 'typescriptreact', 'css', 'scss' },
  init_options = {
    linters = {
      eslint_d = {
        command = 'npx',
        -- rootPatterns = { '.git' },
        debounce = 100,
        args = { 'eslint_d', '--stdin', '--stdin-filename', '%filepath', '--format', 'json' }
      },
    },
    filetypes = {
      css = 'eslint_d',
      scss = 'eslint_d',
      javascript = 'eslint_d',
      javascriptreact = 'eslint_d',
      typescript = 'eslint_d',
      typescriptreact = 'eslint_d'
    }
  }
}

-- Nix.
nvim_lsp['rnix'].setup {}
EOF

" Try and find the definition of the thing if not then find the typedef.
lua << EOF
function _G.goto_type_or_definition()
  if pcall(vim.lsp.buf.definition) then
  else
    vim.lsp.buf.type_definition()
  end
end
EOF

nnoremap <C-]> <cmd>lua goto_type_or_definition()<CR>

" We need help in vim damnit!
if &filetype != 'vim'
  nnoremap K <cmd>lua vim.lsp.buf.hover()<CR>
endif

" Some mappings 🤪
nnoremap gI <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <leader>sr <cmd>lua vim.lsp.buf.rename()<CR>
nnoremap <leader>* <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <leader>l <cmd>lua vim.lsp.diagnostic.set_loclist()<CR>
" nnoremap <leader>Q <cmd>lua vim.lsp.diagnostic.set_qflist()<CR>


" - deoplete                                                          16df4499
let g:deoplete#enable_at_startup = 1
autocmd CompleteDone * silent! pclose!

" ultisnips                                                           282c8d63
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" Python style.
let g:ultisnips_python_style="google"
" Snippet personal infomation
let g:snips_author = "Max Schulte"
let g:snips_email = "maximilliangschulte@pm.me"
let g:snips_github = "maxsei"
